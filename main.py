import asyncio
import logging
import random
import re

from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command

import algorithm
import database
import env_config

# –°–æ–∑–¥–∞—ë–º Bot, Dispatcher –∏ Database
bot = Bot(token=env_config.TELEGRAM_BOT_TOKEN)
app = Dispatcher()
db = database.Database()
db.create_table()


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–≤—à–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î
def user_check_message_mw(handler, event: Message, data: dict):
    db.add_user(event.from_user.id, event.chat.id, event.from_user.username)  # –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –ë–î –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    return handler(event, data)


app.message.middleware(user_check_message_mw)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /films, /filmr, /film.
@app.message(Command("films", "filmr", "film"))
async def send_filtered_movie(message: Message):
    command = message.text.replace(f'{env_config.BOT_USERNAME}', '').split()[0][1:]
    logging.info(f"Get command: {command}")
    try:
        if command == "films":
            await algorithm.handle_films_command(message)
        elif command == "filmr":
            await algorithm.handle_film_random_command(message)
        elif command == "film":
            await algorithm.handle_film_title_command(message)
        else:
            logging.info(f"Unknown command: {command}. Skipping...")
            return
            # await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ üò¢")
    except Exception as err:
        logging.error(f"[send_filtered_movie] Command processing error {command}: {err}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üò¢")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@app.message(Command("everyone") or F.text.contains('@all'))
async def all_users_mention(message: Message):
    users = db.get_users(message.from_user.id, message.chat.id)
    try:
        if users:
            response_text = f"{', '.join(users)}"
        else:
            response_text = "–Ø –µ—â—ë –Ω–µ –æ–±–Ω–æ–≤–∏–ª —Å–≤–æ—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–∫–∞ —á—Ç–æ –í—ã –≤ –Ω–µ–π –æ–¥–∏–Ω üòî"
        logging.info(
            f"[all_users_mention] A general message has been sent for {response_text if users else 'no users'}")
        await message.reply(response_text, parse_mode="Markdown")
    except Exception as err:
        logging.error(f"[all_users_mention] Error: {err}")
        return


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è /watching –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
@app.callback_query(F.data.startswith('/film'))
async def emulate_user_film_command(callback_query: types.CallbackQuery):
    logging.info(f"Emulate user film command: {callback_query.data}")
    command_text = callback_query.data
    # –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    fake_message = types.Message(
        message_id=callback_query.message.message_id,
        date=callback_query.message.date,
        chat=callback_query.message.chat,
        from_user=callback_query.from_user,
        text=command_text,
    )
    # –ü–µ—Ä–µ–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –±–æ—Ç—É
    await send_filtered_movie(fake_message.as_(bot))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ñ–∏–ª—å–º–µ
@app.message(Command("watching"))
async def watching_command(message: Message):
    command = message.text.replace(f'{env_config.BOT_USERNAME}', '').split()[0][1:]
    logging.info(f"Get command: {command}")
    if not command == 'watching':
        logging.info(f"Unknown command: {command}. Skipping...")
        return

    watching_name = ' '.join(message.text.split(' ')[1:])
    inline_keyboard = (
        InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"–£–∑–Ω–∞—Ç—å –æ —Ñ–∏–ª—å–º–µ: {watching_name}", callback_data=f'/film {watching_name}')]
            ]
        )
    )

    user_id = message.from_user.id
    chat_id = message.chat.id

    users = db.get_users(user_id, chat_id, watching_only=1)
    requester_name = db.get_user_name(user_id, chat_id)

    try:
        if users:
            response_text = f"{requester_name} –∑–æ–≤—ë—Ç {', '.join(users)} –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º"
            if watching_name:
                response_text += f" *{watching_name}*"
        else:
            response_text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∏–Ω–æ, –ø—É—Å—Ç üòî"
        logging.info(
            f"[watching_command] A watching message has been sent for {response_text if users else 'no users'}")
        await message.answer(response_text, reply_markup=inline_keyboard if watching_name else None, parse_mode="Markdown")
    except Exception as err:
        logging.error(f"[watching_command] Error: {err}")
        return


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
@app.message(Command('watch', 'unwatch'))
async def watch_unwatch(message: Message):
    command = message.text.replace(f'{env_config.BOT_USERNAME}', '').split()[0][1:]
    logging.info(f"Get command: {command}")
    try:
        if command == 'watch':
            notify_watching = 1
            success_message = "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è ü•≥"
            fail_message = "–û—à–∏–±–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å –í–∞—Å –Ω–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"
        elif command == 'unwatch':
            notify_watching = 0
            success_message = "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π üòî"
            fail_message = "–û—à–∏–±–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å –í–∞—Å –æ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"
        else:
            logging.info(f"[watch_unwatch] Unknown command: {command}. Skipping...")
            return

        if db.update_notify_watching_status(message.from_user.id, message.chat.id, notify_watching):
            await algorithm.send_and_delete(message, success_message, reply=True)
        else:
            await algorithm.send_and_delete(message, fail_message, reply=True)
    except Exception as err:
        logging.error(f"[watch_unwatch] Error: {err}")
        return


# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏
@app.message(Command("setname", "removename", "myname"))
async def setname_remove(message: Message):
    command = message.text.replace(f'{env_config.BOT_USERNAME}', '').split()[0][1:]
    logging.info(f"Get command: {command}")

    user_id = message.from_user.id
    group_id = message.chat.id
    custom_name = ' '.join(message.text.split(' ')[1:])

    try:
        if command == 'setname':
            if not custom_name:
                await algorithm.send_and_delete(
                    message,
                    "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã:\n/setname –í–∞—à–µ –∏–º—è",
                    reply=True
                )
                return
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            if invalid_match := re.search(r"[\\;:,?/=@&<>+$%|[\]()'\"!{}]", custom_name):
                invalid_char = invalid_match.group(0)
                await algorithm.send_and_delete(
                    message,
                    f"–û—à–∏–±–∫–∞: –Ω–∞–π–¥–µ–Ω –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª: {invalid_char}\n"
                    f"–ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: \\;:,<>?/=@&+$%|[]()\'\"!" + "{}",
                    reply=True
                )
                return
            elif len(custom_name) > 20:
                await algorithm.send_and_delete(
                    message,
                    "–û—à–∏–±–∫–∞: –∏–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 20 —Å–∏–º–≤–æ–ª–æ–≤",
                    reply=True
                )
                return
            db.update_custom_name(user_id, group_id, custom_name)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await algorithm.send_and_delete(message, f"–í–∞—à–µ –∏–º—è *{custom_name}* —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", reply=True)
            return
        elif command == 'removename':
            db.update_custom_name(user_id, group_id)
            await algorithm.send_and_delete(message, "–í–∞—à–µ –∏–º—è —É–¥–∞–ª–µ–Ω–æ", reply=True)
            return
        elif command == 'myname':
            custom_name = db.get_custom_name(user_id, group_id)
            if custom_name:
                await algorithm.send_and_delete(message, f"–í–∞—à–µ –∏–º—è: *{custom_name}*", reply=True)
            else:
                await algorithm.send_and_delete(message, "–í–∞—à–µ –∏–º—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", reply=True)
            return
        else:
            logging.info(f"[setname_remove] Unknown command: {command}. Skipping...")
    except Exception as err:
        logging.error(f"[setname_remove] Error: {err}")
        return


from aiogram.filters import Command


# –ö–æ–º–∞–Ω–¥—ã —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–µ–π
@app.message(Command("coin", "coingirl", "randomgirl"))
async def coin_flip(message: Message):
    command = message.text.replace(f'{env_config.BOT_USERNAME}', '').split()[0][1:]
    logging.info(f"Get command: {command}")

    try:
        if command == "coin":
            result = random.choice(["–û—Ä—ë–ª", "–†–µ—à–∫–∞"])
            user_name = db.get_user_name(message.from_user.id, message.chat.id)
            await message.answer(f"{user_name} –ø–æ–¥–±—Ä–æ—Å–∏–ª –º–æ–Ω–µ—Ç–∫—É, –ø–æ–π–º–∞–ª... –∏ —Ç–∞–º {result}", parse_mode="Markdown")
        else:
            girls = ["–î–∞—à–∏", "–°–∞—à–∏", "–ö—Ä–∏—Å"]
            emojis = ["üòä", "üòç", "üòò", "‚ù§Ô∏è", "üòú", "üíñ", "üåπ", "üî•"]
            girl = random.choice(girls)
            emoji = random.choice(emojis)
            await message.answer(f"–û–π, –∫—Ç–æ-—Ç–æ –∏–∑ —á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª {emoji} –¥–ª—è {girl}")
        await message.delete()
        return None
    except Exception as err:
        logging.error(f"[coin_flip] Error: {err}")
        return None


@app.message(Command("coins"))
async def coins_func(message: Message):
    command = message.text.replace(f'{env_config.BOT_USERNAME}', '').split()[0][1:]
    logging.info(f"UNKNOWN COMMAND FIND NEW: {command}")


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
@app.message(Command("vote", "poll"))
async def vote_msg(message: Message):
    options_text = re.sub(rf"^/(poll|vote)({env_config.BOT_USERNAME})?\s*", "",
                          message.text).strip()  # –û—Ç–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
    options = [option.strip() for option in options_text.split(",") if
               option.strip()]  # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ ","
    options = list({option.lower(): option for option in options}.values())  # –§–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    if len(options) < 2:
        await message.answer(
            f"{message.from_user.username}, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")
    elif len(options) > 10:
        await message.answer(f"{message.from_user.username}, –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏")
    else:
        await message.answer_poll(
            question=f'"{message.from_user.username}" –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å:',
            options=options, is_anonymous=False, type="regular"
        )
    await algorithm.send_and_delete(message, timeout=30, reply=False)


# –§—É–Ω–∫—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π gif
@app.message(Command("gif"))
async def send_random_gif(message: Message):
    query = message.text.split(' ', 1)[1].strip() if len(message.text.split(' ', 1)) > 1 else ""
    if not query:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä:\n/gif cat")
        return
    try:
        gif_url = await algorithm.get_random_gif(query)
        await message.reply_animation(gif_url)
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ GIF: {err}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


# –ü–æ–º–æ—â—å
@app.message(Command("help_film", "help_film_genres", "help_film_countries"))
async def film_command_help(message: Message):
    if '/help_film_countries' in message.text:
        help_text = f'*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω*:\n{", ".join(map(str, sorted(database.VALID_COUNTRIES)))}'
    elif '/help_film_genres' in message.text:
        help_text = f'*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤*:\n{", ".join(map(str, sorted(database.VALID_GENRES)))}'
    else:
        help_text = (
            "*–ì–∞–π–¥ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥:*\n\n"

            "/film –Ω–∞–∑–≤–∞–Ω–∏–µ - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∏–ª—å–º–∞. –ü—Ä–∏–º–µ—Ä:\n"
            "`/film –®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å`\n\n"

            "/filmr - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª—É—á–∞–π–Ω–æ–º —Ñ–∏–ª—å–º–µ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (–∂–∞–Ω—Ä, —Å—Ç—Ä–∞–Ω–∞, –≥–æ–¥, —Ä–µ–π—Ç–∏–Ω–≥). –ü—Ä–∏–º–µ—Ä:\n"
            "`/filmr 2-5 2009-2020 +—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ -–¥—Ä–∞–º–∞ –†–æ—Å—Å–∏—è —Ñ–∏–ª—å–º`\n"
            "`/filmr 5 2020 +—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ +—É–∂–∞—Å—ã -–¥—Ä–∞–º–∞ –°–®–ê -–†–æ—Å—Å–∏—è –º—É–ª—å—Ç—Ñ–∏–ª—å–º`\n\n"

            "/films - –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–∞—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–µ–º—É —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (–∂–∞–Ω—Ä, —Å—Ç—Ä–∞–Ω–∞, –≥–æ–¥, —Ä–µ–π—Ç–∏–Ω–≥). –ü—Ä–∏–º–µ—Ä:\n"
            "`/films 2-5 2009-2020 +—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ -–¥—Ä–∞–º–∞ –†–æ—Å—Å–∏—è —Ñ–∏–ª—å–º`\n"
            "`/films 5 2020 +—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ +—É–∂–∞—Å—ã -–¥—Ä–∞–º–∞ –°–®–ê -–†–æ—Å—Å–∏—è –º—É–ª—å—Ç—Ñ–∏–ª—å–º`\n\n"

            "*–ü–æ–¥—Å–∫–∞–∑–∫–∏:*\n"
            "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `+` –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∂–∞–Ω—Ä–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—ã.\n"
            "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `-` –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∂–∞–Ω—Ä–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—ã.\n"
            "- –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY` –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω `YYYY-YYYY`.\n"
            "- –†–µ–π—Ç–∏–Ω–≥ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ `–æ—Ç 1 –¥–æ 10` –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä `1-5`. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ `N`,"
            "—Ç–æ —Ä–µ–π—Ç–∏–Ω–≥ –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω `–æ—Ç N –¥–æ 10`"
        )
    sent_message = await message.answer(help_text, parse_mode="Markdown")
    try:
        sent_message
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help_film /help_film_genres /help_film_countries: {err}")
    await algorithm.send_and_delete(sent_message, timeout=60, reply=False)
    await message.delete()


# –£–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
@app.message(Command("help"))
async def help_msg(message: Message):
    sent_message = await message.reply(
        "/everyone –∏–ª–∏ @all - –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "/vote –∏–ª–∏ /poll <–≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é> - –°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç 2 –¥–æ 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
        "/film <–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞> - –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "/filmr <—Ä–µ–π—Ç–∏–Ω–≥, –≥–æ–¥, –∂–∞–Ω—Ä, —Ç–∏–ø> - –ü–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞\n"
        "/films <—Ä–µ–π—Ç–∏–Ω–≥, –≥–æ–¥, –∂–∞–Ω—Ä, —Ç–∏–ø> - –ü–æ–∏—Å–∫ 10 —Ñ–∏–ª—å–º–æ–≤\n"
        "/setname <–∏–º—è> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è\n"
        "/removename - –£–¥–∞–ª–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è\n"
        "/watching <–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞> - –ü–æ–∑–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–∞\n"
        "/watch - –í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Ñ–∏–ª—å–º–∞\n"
        "/unwatch - –û—Ç–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Ñ–∏–ª—å–º–∞\n"
        "/coin - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É (–û—Ä—ë–ª, –†–µ—à–∫–∞)\n"
        "/coingirl –∏–ª–∏ /randomgirl - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –¥–µ–≤—É—à–∫—É üòÇ —à—É—á—É –∏–ª–∏ –Ω–µ—Ç ü§î\n"
        "/gif <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –≥–∏—Ñ–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n\n"
        "/help - –ü–æ–º–æ—â—å –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º\n"
        "/help_film - –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º film\n"
        "/help_film_genres - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ film\n"
        "/help_film_countries - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ film\n"
    )
    try:
        sent_message
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help: {err}")
    await algorithm.send_and_delete(sent_message, timeout=60, reply=False)
    await message.delete()


# –£–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!
@app.message(Command("dm"))
async def delete_replied_message(message: Message):
    if str(message.from_user.id) in env_config.ADMIN_USER_ID:
        try:
            await message.reply_to_message.delete()
            # logging.info(
            #     f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <{message.from_user.username}> –æ—Ç <{message.reply_to_message.from_user.username}>"
            #     f"—É–¥–∞–ª–∏–ª <{message.reply_to_message.text 
            #     if message.reply_to_message.text else message.reply_to_message.poll.question}>"
            # )
        except Exception as err:
            logging.error(f"[delete_replied_message] Error delete message: {err}")
    else:
        logging.warning(
            f'User <{message.reply_to_message.from_user.username}> from {message.chat.id} tried to use command /dm'
        )
    await message.delete()


# Welcome and goodbye message
@app.message(F.new_chat_members | F.left_chat_member)
async def somebody_added(message: Message):
    if message.new_chat_members:
        for user in message.new_chat_members:
            if user.is_bot:
                return
            # await message.reply(
            #     f"–ü—Ä–∏–≤–µ—Ç, [{user.full_name if user.full_name else user.username}](tg://user?id={user.id}), "
            #     f"–≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
            #     parse_mode="Markdown")
            db.add_user(user.id, message.chat.id, user.username)
    elif message.left_chat_member:
        left_member = message.left_chat_member
        if left_member.is_bot:
            return
        # await message.answer(f"[{left_member.full_name}](tg://user?id={left_member.id}) –ø–æ–∫–∏–Ω—É–ª(–∞) —á–∞—Ç", parse_mode="Markdown")
        db.delete_user(left_member.id, group_id=message.chat.id)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
@app.message()
async def check_user_in_db(message: Message):
    # logging.info(f'Skipping a message from {message.from_user.id} in {message.chat.id}')
    return None


# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    try:
        await app.start_polling(bot)
    except KeyboardInterrupt:
        logging.error("Bot was stopped by the user")
    except asyncio.CancelledError:
        logging.error("Bot has been cancelled")
    except Exception as err:
        logging.error(f"Critical error: {err}", exc_info=True)
    finally:
        logging.critical(f"Bot {env_config.BOT_USERNAME} was stopped...")
        await bot.session.close()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(main())
